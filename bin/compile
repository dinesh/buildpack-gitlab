#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# install rvm
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -sSL https://get.rvm.io | bash -s stable
echo 'source /usr/local/rvm/scripts/rvm' >> /etc/bash.bashrc

# install ruby and gems
/bin/bash -l -c "rvm install --default 2.1.5"
/bin/bash -l -c "gem install bundler"

# Debug mode
[[ $DEBUG ]] && set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
PROFILE_PATH="$BUILD_DIR/.profile.d/gitlab.sh"

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR ENV_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# exit if no build environment
[[ ! $REDIS_URL ]] && error "No supporting environment detected!\nPlease create supporting application services."

cd $BUILD_DIR

# 1. Packages / Dependencies
status "Installing required packages"
export DEBIAN_FRONTEND=noninteractive
sudo -E apt-get update -qq > /dev/null
sudo -E apt-get install -y python-software-properties software-properties-common > /dev/null
sudo FORCE_ADD_APT_REPOSITORY=yes add-apt-repository ppa:git-core/ppa &> /dev/null
sudo -E apt-get update -qq > /dev/null
sudo -E apt-get install -qq -y --force-yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" unzip checkinstall libyaml-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev libicu-dev redis-server python-docutils git cmake &> /dev/null
sudo -E apt-get clean

# 2. Ruby
# via heroku-buildpack-ruby

# 3. System Users
status "Configuring git user"
sudo adduser --disabled-login --gecos 'GitLab' git

# 4. GitLab shell
GITLAB_SHELL_DEFAULT_VERSION="v1.9.8"
if [ -f GITLAB_SHELL_VERSION -a -s GITLAB_SHELL_VERSION ]; then
	# try to read from file GITLAB_SHELL_VERSION
	GITLAB_SHELL_DEFAULT_VERSION="v$(<GITLAB_SHELL_VERSION)"
fi
GITLAB_SHELL_VERSION=${GITLAB_SHELL_VERSION:-${GITLAB_SHELL_DEFAULT_VERSION}}
status "Downloading gitlab-shell ${GITLAB_SHELL_VERSION}"
sudo -u git -H mkdir -p /home/git/gitlab-shell
wget -qO- https://github.com/gitlabhq/gitlab-shell/archive/${GITLAB_SHELL_VERSION}.tar.gz | sudo -u git -H tar xz --strip=1 -C /home/git/gitlab-shell/

(
	cd /home/git/gitlab-shell
	if sudo -u git -H git apply --check $ROOT_DIR/support/patches/gitlab-shell-config.rb.patch &> /dev/null; then
		status "Patching gitlab-shell/lib/gitlab_config.rb to allow using ERB in config.yml"
		sudo -u git -H git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/gitlab-shell-config.rb.patch
	fi
	status "Writing gitlab-shell/config.yml to read from REDIS_URL"
	sudo -u git -H cp $ROOT_DIR/support/templates/gitlab-shell-config.yml config.yml
	# dirty way to make sure the environment variables from gitlab will be available in gitlab-shell cli via ssh
	sudo cp $ROOT_DIR/support/templates/gitlab2gitlabshell-env.sh /usr/local/bin/gitlab2gitlabshell-env.sh
	sudo chmod +x /usr/local/bin/gitlab2gitlabshell-env.sh
	sudo grep -q "gitlab2gitlabshell" /etc/pam.d/sshd || echo "session    optional     pam_exec.so /usr/local/bin/gitlab2gitlabshell-env.sh" | sudo tee -a /etc/pam.d/sshd > /dev/null
	sudo grep -q "PermitUserEnvironment yes" /etc/ssh/sshd_config || echo "PermitUserEnvironment yes" | sudo tee -a /etc/ssh/sshd_config > /dev/null
	sudo -u git -H test -d /home/git/.profile.d || sudo -u git -H mkdir /home/git/.profile.d
	sudo -u git -H ln -s $BUILD_DIR/.profile.d/app-env.sh /home/git/.profile.d/app-env.sh
	sudo -u git -H mkdir log
	status "Installing gitlab-shell"
	sudo -E -u git -H ./bin/install
	sudo -u git -H mkdir /home/git/gitlab-satellites
)

sudo chown -R git:root /home/git/repositories/
sudo chown -R git:root /home/git/.ssh/

sudo chmod -R ug+rwX,o-rwx /home/git/repositories/
sudo chmod u+rwx,g=rx,o-rwx /home/git/gitlab-satellites

# 5. Database



# 6. GitLab

grep -q "sshd" Procfile || echo "sshd: /usr/sbin/sshd -D" >> Procfile

if git apply --check $ROOT_DIR/support/patches/resque_url_4_sidekiq.rb.patch &> /dev/null; then
	status "Patching config/initializers/4_sidekiq.rb to read from REDIS_URL"
	git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/resque_url_4_sidekiq.rb.patch
fi
if git apply --check $ROOT_DIR/support/patches/resque_url_production.rb.patch &> /dev/null; then
	status "Patching config/environments/production.rb to read from REDIS_URL"
	git apply --ignore-space-change --ignore-whitespace $ROOT_DIR/support/patches/resque_url_production.rb.patch
fi

# Setup Configuration Variables
GITLAB_HOST=${GITLAB_HOST:-localhost}
GITLAB_PORT=${GITLAB_PORT:-80}
GITLAB_HTTPS=${GITLAB_HTTPS:-false}

GITLAB_TIMEZONE=${GITLAB_TIMEZONE:-UTC}

GITLAB_EMAIL=${GITLAB_EMAIL:-example@example.com}

GITLAB_SSH_HOST=${GITLAB_SSH_HOST:-$GITLAB_HOST}
GITLAB_SSH_PORT=${GITLAB_SSH_PORT:-$GITLAB_SHELL_SSH_PORT} # for backwards compatibility
GITLAB_SSH_PORT=${GITLAB_SSH_PORT:-22}

OAUTH_ENABLED=${OAUTH_ENABLED:-false}
OAUTH_GITHUB_API_KEY=${OAUTH_GITHUB_API_KEY:-}
OAUTH_GITHUB_APP_SECRET=${OAUTH_GITHUB_APP_SECRET:-}

SMTP_DOMAIN=${SMTP_DOMAIN:-gmail.com}
SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
SMTP_PORT=${SMTP_PORT:-587}
SMTP_USER=${SMTP_USER:-}
SMTP_PASS=${SMTP_PASS:-}
SMTP_OPENSSL_VERIFY_MODE=${SMTP_OPENSSL_VERIFY_MODE:-}
SMTP_STARTTLS=${SMTP_STARTTLS:-true}
if [ -n "${SMTP_USER}" ]; then
  SMTP_ENABLED=${SMTP_ENABLED:-true}
  SMTP_AUTHENTICATION=${SMTP_AUTHENTICATION:-login}
fi
SMTP_ENABLED=${SMTP_ENABLED:-false}
GITLAB_EMAIL_ENABLED=${GITLAB_EMAIL_ENABLED:-$SMTP_ENABLED}


# copy default configurations
test -f config/gitlab.yml || cp $ROOT_DIR/support/templates/gitlab.yml config/gitlab.yml
test -f config/resque.yml || cp config/resque.yml.example config/resque.yml

sudo -u root -H sed 's/{{GITLAB_HOST}}/'"${GITLAB_HOST}"'/' -i config/gitlab.yml
sudo -u root -H sed 's/{{GITLAB_PORT}}/'"${GITLAB_PORT}"'/' -i config/gitlab.yml
sudo -u root -H sed 's/{{GITLAB_HTTPS}}/'"${GITLAB_HTTPS}"'/' -i config/gitlab.yml
sudo -u root -H sed 's/{{GITLAB_EMAIL}}/'"${GITLAB_EMAIL}"'/' -i config/gitlab.yml

sudo -u root -H sed 's/{{GITLAB_SSH_HOST}}/'"${GITLAB_SSH_HOST}"'/' -i config/gitlab.yml
sudo -u root -H sed 's/{{GITLAB_SSH_PORT}}/'"${GITLAB_SSH_PORT}"'/' -i config/gitlab.yml

sudo -u root -H sed 's/{{GITLAB_TIMEZONE}}/'"${GITLAB_TIMEZONE}"'/' -i config/gitlab.yml

sudo -u root -H sed 's/{{OAUTH_ENABLED}}/'"${OAUTH_ENABLED}"'/' -i config/gitlab.yml
# github
if [ -n "${OAUTH_GITHUB_API_KEY}" -a -n "${OAUTH_GITHUB_APP_SECRET}" ]; then
  OAUTH_ENABLED=true
  sudo -u root -H sed 's/{{OAUTH_GITHUB_API_KEY}}/'"${OAUTH_GITHUB_API_KEY}"'/' -i config/gitlab.yml
  sudo -u root -H sed 's/{{OAUTH_GITHUB_APP_SECRET}}/'"${OAUTH_GITHUB_APP_SECRET}"'/' -i config/gitlab.yml
  sudo -u root -H sed 's/{{OAUTH_GITHUB_SCOPE}}/user:email/' -i config/gitlab.yml
else
  sudo -u root -H sed '/{{OAUTH_GITHUB_API_KEY}}/d' -i config/gitlab.yml
  sudo -u root -H sed '/{{OAUTH_GITHUB_APP_SECRET}}/d' -i config/gitlab.yml
  sudo -u root -H sed '/{{OAUTH_GITHUB_SCOPE}}/d' -i config/gitlab.yml
fi

test -f config/database.yml || cp config/database.yml.mysql config/database.yml

sudo -u root -H sed 's/{{DB_HOST}}/'"${DB_HOST}"'/' -i config/database.yml
sudo -u root -H sed 's/{{DB_NAME}}/'"${DB_NAME}"'/' -i config/database.yml
sudo -u root -H sed 's/{{DB_PASSWORD}}/'"${DB_PASSWORD}"'/' -i config/database.yml
sudo -u root -H sed 's/{{DB_PORT}}/'"${DB_PORT}"'/' -i config/database.yml
sudo -u root -H sed 's/{{DB_USER}}/'"${DB_USER}"'/' -i config/database.yml

test -f config/unicorn.rb || cp config/unicorn.rb.example config/unicorn.rb
sed 's,/home/git/gitlab,/app,' -i config/unicorn.rb
test -f config/initializers/rack_attack.rb || cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb

sudo -u git -H git config --global user.name "GitLab"
sudo -u git -H git config --global user.email "gitlab@lapwinglabs.com"
sudo -u git -H git config --global core.autocrlf "input"

# run processes as root
# status "Patching config/gitlab.yml to run processes as root"
# sed 's,# user: git,user: root,' -i config/gitlab.yml
# grep -q "ssh_user: git" config/gitlab.yml || sed '/ssh_port:/i\    ssh_user: git' -i config/gitlab.yml

# create required tmp and log directories
mkdir -p tmp/pids/ tmp/sockets/ public/uploads

# cat > config/sidekiq.yml <<EOF
# :concurrency: {{SIDEKIQ_CONCURRENCY}}
# EOF

# install logrotate configuration
sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab
sudo sed 's,/home/git/gitlab/,/app/,' -i /etc/logrotate.d/gitlab

# 7. Nginx
# not required

if [ ! -f config/initializers/smtp_settings.rb ]; then
	status "Writing config/initializers/smtp_settings.rb to read from SMTP_*"
	cp $ROOT_DIR/support/templates/smtp_settings.rb config/initializers/smtp_settings.rb
fi

# configure mail delivery
sudo -u root -H sed 's/{{GITLAB_EMAIL_ENABLED}}/'"${GITLAB_EMAIL_ENABLED}"'/' -i config/gitlab.yml
if [ "${SMTP_ENABLED}" == "true" ]; then
  sudo -u root -H sed 's/{{SMTP_HOST}}/'"${SMTP_HOST}"'/' -i config/initializers/smtp_settings.rb
  sudo -u root -H sed 's/{{SMTP_PORT}}/'"${SMTP_PORT}"'/' -i config/initializers/smtp_settings.rb

  case "${SMTP_USER}" in
    "") sudo -u root -H sed '/{{SMTP_USER}}/d' -i config/initializers/smtp_settings.rb ;;
    *) sudo -u root -H sed 's/{{SMTP_USER}}/'"${SMTP_USER}"'/' -i config/initializers/smtp_settings.rb ;;
  esac

  case "${SMTP_PASS}" in
    "") sudo -u root -H sed '/{{SMTP_PASS}}/d' -i config/initializers/smtp_settings.rb ;;
    *) sudo -u root -H sed 's/{{SMTP_PASS}}/'"${SMTP_PASS}"'/' -i config/initializers/smtp_settings.rb ;;
  esac

  sudo -u root -H sed 's/{{SMTP_DOMAIN}}/'"${SMTP_DOMAIN}"'/' -i config/initializers/smtp_settings.rb
  sudo -u root -H sed 's/{{SMTP_STARTTLS}}/'"${SMTP_STARTTLS}"'/' -i config/initializers/smtp_settings.rb

  if [ -n "${SMTP_OPENSSL_VERIFY_MODE}" ]; then
    sudo -u root -H sed 's/{{SMTP_OPENSSL_VERIFY_MODE}}/'"${SMTP_OPENSSL_VERIFY_MODE}"'/' -i config/initializers/smtp_settings.rb
  else
    sudo -u root -H sed '/{{SMTP_OPENSSL_VERIFY_MODE}}/d' -i config/initializers/smtp_settings.rb
  fi

  case "${SMTP_AUTHENTICATION}" in
    "") sudo -u root -H sed '/{{SMTP_AUTHENTICATION}}/d' -i config/initializers/smtp_settings.rb ;;
    *) sudo -u root -H sed 's/{{SMTP_AUTHENTICATION}}/'"${SMTP_AUTHENTICATION}"'/' -i config/initializers/smtp_settings.rb ;;
  esac
fi

# create the /var/run/sshd directory (required for sshd to start)
sudo mkdir -p /var/run/sshd

status "Starting Sidekiq"
cd $ROOT_DIR
bundle exec rake sidekiq:start RAILS_ENV=production

status "Finished building GitLab"
